#include<sstream>
#include<iostream>
#include<string>
#include<ctime>
using namespace std;
//we don't create the tree, instead we search the leaf_node directly and use recursion with back tracing
int inorder[10000];
int postorder[10000];
int min_sum = 10000 * 10000;
int node = 10000;
string input_string;

void find_min_path(int in_l, int in_r, int post_l, int post_r, int value) {//inclusive, and in_r - in_l == post_r - post_l
	if (in_l > in_r || post_l > post_r) return;
	if (in_l == in_r) {
		if (value + inorder[in_l] < min_sum) {
			min_sum = value + inorder[in_l];
			node = inorder[in_l];
		}
		else if (value + inorder[in_l] == min_sum && inorder[in_l] < node) {
			node = inorder[in_l];
		}
		return;
	}
	int root = in_l;
	for (; inorder[root] != postorder[post_r]; root++);
	if (value + inorder[root] >= min_sum) return;
	//left-hand-tree
	find_min_path(in_l, root - 1, post_l, root - 1 - in_l + post_l, value + inorder[root]);
	//right-hand-tree
	find_min_path(root + 1, in_r, post_r - (in_r - root), post_r - 1, value + inorder[root]);
}

int main()
{
	//freopen("input.txt", "r", stdin);
	//freopen("output.txt", "w", stdout);

	while (getline(cin, input_string)) {
		//input
		stringstream input(input_string);
		int num = 0;
		while (input >> inorder[num]) num++;
		//getchar();
		getline(cin, input_string);
		input.clear();
		input.str(input_string);
		for (int i = 0; i < num; i++) input >> postorder[i];
		//find answers
		find_min_path(0, num - 1, 0, num - 1, 0);
		printf("%d\n", node);
		min_sum = 10000 * 10000;
		node = 10000;
	}
	//printf("Total time: %.3f s.\n", (double)clock() / CLOCKS_PER_SEC);
	//system("pause");
	return 0;
}
