#include<bits/stdc++.h>
using namespace std;

string input;
int appear_hash[26];//char->int; log which character(upper) appears in input stream and log their sequence(zero-indexed)
char Hash[26];//int->char
bool gph[9][9];//int->relation; log what the graph looks like
int min_max_bw;
char ordering[9];
char ans[9];
//recursion with back tracing
void fill_ordering(int total, int cur, int bw) {
	if(total == cur) {
		if(bw < min_max_bw) {
			min_max_bw = bw;
			for(int i = 0; i < total; i++) ans[i] = ordering[i];
		}
		return;
	}
	for(int i = 0; i < total; i++) {
		if(!Hash[i]) continue;
		//fill ordering
		ordering[cur] = Hash[i];
		char temp = Hash[i];
		//update bw
		for(int i = 0; i < cur; i++) {
			if(gph[appear_hash[ordering[i] - 'A']][appear_hash[temp - 'A']]) {
				if(cur - i >= min_max_bw) {
					return;
				}
				bw = (bw >= cur - i ? bw : cur - i);
			}
		}
		Hash[i] = '\0';
		fill_ordering(total, cur + 1, bw);
		Hash[i] = temp;
	}
}

int main() {
	//freopen("input.txt", "r", stdin);
	//freopen("output.txt", "w", stdout);

	while(getline(cin, input) && input != "#") {
		//fill appear_hash booly
		memset(appear_hash, 0, sizeof(appear_hash));
		for(auto i = input.begin(); i != input.end(); i++) {
			if(*i >= 'A' && *i <= 'Z') {
				appear_hash[*i - 'A'] = true;
			}
		}
		//fill appear_hash intly, fill hash
		int total = 0;
		for(int i = 0; i < 26; i++) {
			if(appear_hash[i]) appear_hash[i] = total, Hash[total++] = i + 'A';
		}
		//fill gph
		auto it = input.begin();
		bool is_src = true;
		int src_index;
		memset(gph, 0, sizeof(gph));
		while(it != input.end()) {
			if(is_src && *it >= 'A' && *it <= 'Z') {
				src_index = appear_hash[*it - 'A'];
				is_src = false;
			} else if(!is_src && *it >= 'A' && *it <= 'Z') {
				gph[appear_hash[*it - 'A']][src_index] = gph[src_index][appear_hash[*it - 'A']] = true;
			} else if(*it == ';') {
				is_src = true;
			}
			it++;
		}
		//recursion with back tracing
		min_max_bw = total;
		fill_ordering(total, 0, 0);
		//print the results
		for(int i = 0; i < total; i++) {
			printf("%c ", ans[i]);
		}
		printf("-> %d\n", min_max_bw);
	}

	//printf("Total time: %.3f s.\n", (double)clock()/CLOCKS_PER_SEC);
	return 0;
}
